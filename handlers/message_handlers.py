import time
import asyncio
import datetime
import pytz
import logging
from typing import Dict, Tuple, Optional, Any, List
from collections import defaultdict

from aiogram import Router, F, Bot
from aiogram.types import Message, ChatPermissions, User
from data.texts import TEXTS
from config import Config
from db.operations import (
    record_violation,
    record_deleted_message,
    get_incidents_count
)
from admin_notifications import send_admin_notification
from data.admin_texts import VIOLATION_DESCRIPTIONS, ADMIN_VIOLATION_WARNING
from db.models import Violation
from db.operations import (
    add_violation,
    get_user_violations_count,
    get_user_active_violations
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

message_router = Router(name="message_router")

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# user_id -> List[Tuple[message_id, reply_to_message_id, timestamp]]
user_messages: Dict[int, List[Tuple[int, Optional[int], float]]] = defaultdict(list)

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ (60 –º–∏–Ω—É—Ç)
CACHE_TTL = 3600

logger = logging.getLogger(__name__)

async def cleanup_old_cache_entries():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ user_messages"""
    while True:
        try:
            current_time = time.time()
            for user_id in list(user_messages.keys()):
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ CACHE_TTL
                user_messages[user_id] = [
                    msg for msg in user_messages[user_id]
                    if current_time - msg[2] <= CACHE_TTL
                ]
                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not user_messages[user_id]:
                    del user_messages[user_id]
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logging.error(f"Error in cache cleanup: {str(e)}", exc_info=True)
            await asyncio.sleep(60)

async def init_message_handler():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(cleanup_old_cache_entries())

def is_admin(user_id: int, config: Config) -> bool:
    return user_id in config.admin_ids

async def schedule_delete(bot: Bot, chat_id: int, message_id: int, delay_seconds: int) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay_seconds)
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        await bot.delete_message(chat_id, message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {str(e)}")

async def safe_delete_bot_message(bot: Bot, message: Message, config: Config, is_penalty_message: bool = False) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if config.logging.message_deletion:
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}")
        logger.debug(f"is_penalty_message={is_penalty_message}, delete_penalty_messages={config.delete_penalty_messages}, delete_bot_messages={config.delete_bot_messages}")

    if is_penalty_message and config.delete_penalty_messages:
        if config.logging.message_deletion:
            logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id} —á–µ—Ä–µ–∑ {config.penalty_message_lifetime_seconds} —Å–µ–∫—É–Ω–¥")
        asyncio.create_task(schedule_delete(
            bot, message.chat.id, message.message_id,
            config.penalty_message_lifetime_seconds
        ))
    elif not is_penalty_message and config.delete_bot_messages:
        if config.logging.message_deletion:
            logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ {message.message_id} —á–µ—Ä–µ–∑ {config.bot_message_lifetime_seconds} —Å–µ–∫—É–Ω–¥")
        asyncio.create_task(schedule_delete(
            bot, message.chat.id, message.message_id,
            config.bot_message_lifetime_seconds
        ))

async def _delete_message_safe(message: Message):
    try:
        await message.delete()
    except Exception:
        pass

@message_router.message(F.chat.type.in_({"group", "supergroup"}))
async def process_group_message(message: Message, bot: Bot, event_from_user: User = None, **data):
    config = data["config"]
    chat_id = message.chat.id
    user = message.from_user
    if not user:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –∏ –µ–≥–æ —Ç—Ä–µ–¥–∞—Ö
    main_chat_id = message.chat.id
    if hasattr(message, 'message_thread_id'):
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–¥, –ø–æ–ª—É—á–∞–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        try:
            chat = await bot.get_chat(message.chat.id)
            if hasattr(chat, 'linked_chat_id') and chat.linked_chat_id:
                main_chat_id = chat.linked_chat_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —Ç—Ä–µ–¥–∞: {str(e)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∞–¥–º–∏–Ω-—á–∞—Ç–æ–º
    admin_chat_id = config.admin_chat_id
    if '_' in str(admin_chat_id):
        admin_chat_id = int(str(admin_chat_id).split('_')[0])
    else:
        admin_chat_id = int(admin_chat_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ID –≤ —á–∏—Å–ª–æ
    
    if main_chat_id == admin_chat_id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if chat_id not in config.allowed_groups:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if user.is_bot or message.sender_chat:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã –∏ —Ç.–¥.)
    if message.new_chat_members is not None or message.left_chat_member is not None:
        return
    if message.new_chat_title or message.new_chat_photo or message.delete_chat_photo or message.group_chat_created:
        return
    if message.message_auto_delete_timer_changed or message.pinned_message:
        return

    user_id = user.id
    user_name = f"@{user.username}" if user.username else user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin_user = is_admin(user_id, config)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∏–º–µ–Ω–∏
    if is_admin_user:
        user_name = f"üëÆ‚Äç‚ôÇÔ∏è {user_name} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

    text = message.text or message.caption or ""
    text_len = len(text)
    now_ts = time.time()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if text_len >= config.message_length_limit:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    reply_to_msg_id = message.reply_to_message.message_id if message.reply_to_message else None
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_messages[user_id].append((message.message_id, reply_to_msg_id, now_ts))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    user_messages[user_id].sort(key=lambda x: x[2])
    
    violation_type = None
    delete_msg = False

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prev_messages = [msg for msg in user_messages[user_id][:-1] if now_ts - msg[2] <= CACHE_TTL]
    
    if prev_messages:
        prev_msg = prev_messages[-1]
        prev_msg_id, prev_reply_id, prev_ts = prev_msg

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
        time_violation = False
        if config.check_reply_cooldown and config.reply_cooldown_seconds:
            time_violation = (now_ts - prev_ts) < config.reply_cooldown_seconds

        if reply_to_msg_id:
            if message.reply_to_message.from_user:
                # Self-reply: —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.reply_to_message.from_user.id == user_id:
                    if time_violation:
                        violation_type = "self_reply"
                        delete_msg = not is_admin_user
                # Double-reply: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif prev_reply_id == reply_to_msg_id and time_violation:
                    violation_type = "double_reply"
                    delete_msg = not is_admin_user
        else:
            # No-reply: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–ø–ª–∞—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–µ–∑ —Ä–µ–ø–ª–∞—è
            if not prev_reply_id and time_violation:
                violation_type = "no_reply"
                delete_msg = not is_admin_user

    if violation_type:
        try:
            if is_admin_user:
                if config.warn_admins:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
                    violation_desc = VIOLATION_DESCRIPTIONS.get(violation_type, violation_type)
                    warning_text = ADMIN_VIOLATION_WARNING.format(
                        user_name=user_name,
                        violation_desc=violation_desc,
                        msg_text=text
                    )
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ ID —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
                    chat_id = config.admin_chat_id
                    message_thread_id = None
                    
                    if '_' in str(chat_id):
                        chat_id, message_thread_id = str(chat_id).split('_')
                        chat_id = int(chat_id)
                        message_thread_id = int(message_thread_id)
                    else:
                        chat_id = int(chat_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ID –≤ —á–∏—Å–ª–æ
                    
                    await bot.send_message(
                        chat_id=chat_id,
                        text=warning_text,
                        parse_mode="HTML",
                        message_thread_id=message_thread_id
                    )
            else:
                if delete_msg:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
                    if config.delete_violationg_user_messages:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        if config.violationg_user_messages_lifetime_seconds > 0:
                            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                            asyncio.create_task(schedule_delete(
                                bot, message.chat.id, message.message_id,
                                config.violationg_user_messages_lifetime_seconds
                            ))
                            if config.logging.message_deletion:
                                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id} —á–µ—Ä–µ–∑ {config.violationg_user_messages_lifetime_seconds} —Å–µ–∫—É–Ω–¥")
                        else:
                            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                            await _delete_message_safe(message)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                deleted_msg_id = await record_deleted_message(user_id, user_name, chat_id, text)
                await record_violation(user_id, user_name, chat_id, violation_type, config)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
                notification_text = None
                delete_warning = ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                if config.delete_violationg_user_messages and config.violationg_user_messages_lifetime_seconds > 0:
                    delete_warning = TEXTS["delete_warning"].format(seconds=config.violationg_user_messages_lifetime_seconds)
                
                if violation_type == "no_reply":
                    notification_text = TEXTS["no_reply"].format(name=user_name, delete_warning=delete_warning)
                elif violation_type == "double_reply":
                    notification_text = TEXTS["double_reply"].format(name=user_name, delete_warning=delete_warning)
                elif violation_type == "self_reply":
                    minutes = max(1, (config.reply_cooldown_seconds + 59) // 60)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    notification_text = TEXTS["self_reply"].format(name=user_name, minutes=minutes, delete_warning=delete_warning)

                if notification_text:
                    # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞—Ä—É—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if not config.features.get("penalties", False):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        sent_msg = await message.reply(notification_text, parse_mode="HTML")
                        if sent_msg and config.delete_bot_messages:
                            await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=False)
                    # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ apply_penalties_if_needed
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∞–Ω–∫—Ü–∏–π
                await apply_penalties_if_needed(user_id, user_name, chat_id, config, violation_type, text, bot, deleted_msg_id, message)

        except Exception as e:
            logging.error(f"Error processing violation for user {user_name}: {str(e)}", exc_info=True)

async def apply_penalties_if_needed(
    user_id: int,
    user_name: str,
    group_id: int,
    config: Config,
    violation_type: str,
    msg_text: str,
    bot: Bot,
    deleted_msg_id: int = None,
    original_message: Message = None
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
    if not config.features.get("penalties", False):
        if config.logging.violations:
            logger.debug("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return

    count_incidents = await get_incidents_count(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
    if config.notifications.get("violation_rules", True):
        violation_desc = VIOLATION_DESCRIPTIONS.get(violation_type, violation_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(config.bot_message_delay_seconds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ
        delete_warning = ""
        if config.delete_violationg_user_messages and config.violationg_user_messages_lifetime_seconds > 0 and original_message:
            delete_warning = TEXTS["delete_warning"].format(seconds=config.violationg_user_messages_lifetime_seconds)
            
        if violation_type == "no_reply":
            notification_text = TEXTS["no_reply"].format(name=user_name, delete_warning=delete_warning)
        elif violation_type == "double_reply":
            notification_text = TEXTS["double_reply"].format(name=user_name, delete_warning=delete_warning)
        elif violation_type == "self_reply":
            minutes = max(1, (config.reply_cooldown_seconds + 59) // 60)
            notification_text = TEXTS["self_reply"].format(name=user_name, minutes=minutes, delete_warning=delete_warning)
            
        if notification_text:
            sent_msg = None
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if original_message:
                sent_msg = await original_message.reply(notification_text, parse_mode="HTML")
            else:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                sent_msg = await bot.send_message(group_id, notification_text, parse_mode="HTML")
                
            if sent_msg and config.delete_bot_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
    if not config.features.get("penalties", False):
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    penalty_to_apply = None
    for violations_threshold, penalty in sorted(config.penalties.items(), key=lambda x: int(x[0])):
        if count_incidents >= int(violations_threshold):
            penalty_to_apply = penalty

    if not penalty_to_apply:
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
    if penalty_to_apply == "warning" and config.notifications.get("official_warning", True):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        next_threshold = None
        next_penalty = None
        for threshold, penalty in sorted(config.penalties.items(), key=lambda x: int(x[0])):
            if int(threshold) > count_incidents:
                next_threshold = int(threshold)
                next_penalty = penalty
                break

        if next_threshold and next_penalty:
            violations_until_next = next_threshold - count_incidents
            txt = TEXTS["official_warning"].format(
                name=user_name,
                current_violations=count_incidents,
                next_penalty_description=next_penalty,
                violations_until_next=violations_until_next
            )
            sent_msg = None
            if original_message:
                sent_msg = await original_message.reply(txt, parse_mode="HTML")
            else:
                sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg and config.delete_penalty_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

    elif penalty_to_apply == "read-only":
        try:
            until_date = int(time.time()) + config.mute_duration_seconds
            await bot.restrict_chat_member(
                chat_id=group_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
        except Exception:
            pass

        if config.notifications.get("mute_applied", True):
            msk = pytz.timezone("Europe/Moscow")
            msk_time = datetime.datetime.fromtimestamp(until_date, msk).strftime("%d.%m.%Y %H:%M")
            minutes = max(1, (config.mute_duration_seconds + 59) // 60)
            
            txt = TEXTS["mute_applied"].format(
                name=user_name,
                violations_count=count_incidents,
                minutes=minutes,
                datetime=msk_time
            )
            sent_msg = None
            if original_message:
                sent_msg = await original_message.reply(txt, parse_mode="HTML")
            else:
                sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg and config.delete_penalty_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

    elif penalty_to_apply == "kick":
        try:
            await bot.ban_chat_member(group_id, user_id, until_date=int(time.time()) + 60)
            await bot.unban_chat_member(group_id, user_id)
        except Exception:
            pass

        if config.notifications.get("kick_applied", True):
            txt = TEXTS["kick_applied"].format(name=user_name, violations_count=count_incidents)
            sent_msg = None
            if original_message:
                sent_msg = await original_message.reply(txt, parse_mode="HTML")
            else:
                sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg and config.delete_penalty_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

    elif penalty_to_apply == "kick+ban":
        try:
            until_date = int(time.time()) + config.temp_ban_duration_seconds
            await bot.ban_chat_member(group_id, user_id, until_date=until_date)
        except Exception:
            pass

        if config.notifications.get("kick_ban_applied", True):
            msk = pytz.timezone("Europe/Moscow")
            msk_time = datetime.datetime.fromtimestamp(until_date, msk).strftime("%d.%m.%Y %H:%M")
            minutes = max(1, (config.temp_ban_duration_seconds + 59) // 60)
            
            txt = TEXTS["kick_ban_applied"].format(
                name=user_name,
                violations_count=count_incidents,
                minutes=minutes,
                date_str=msk_time
            )
            sent_msg = None
            if original_message:
                sent_msg = await original_message.reply(txt, parse_mode="HTML")
            else:
                sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg and config.delete_penalty_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

    elif penalty_to_apply == "ban":
        try:
            await bot.ban_chat_member(group_id, user_id)
        except Exception:
            pass

        if config.notifications.get("ban_applied", True):
            txt = TEXTS["ban_applied"].format(name=user_name, violations_count=count_incidents)
            sent_msg = None
            if original_message:
                sent_msg = await original_message.reply(txt, parse_mode="HTML")
            else:
                sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg and config.delete_penalty_messages:
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

async def process_violation(
    bot: Bot,
    message: Message,
    violation_type: str,
    config: Config,
    context: Optional[Dict[str, Any]] = None
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"""
    if config.logging.violations:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ç–∏–ø–∞ {violation_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ
    rule = config.violation_rules.get(violation_type)
    if not rule or not rule.enabled:
        if config.logging.violations:
            logger.debug(f"–ü—Ä–∞–≤–∏–ª–æ {violation_type} –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    # –ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ violation, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not rule.count_as_violation:
        if config.logging.violations:
            logger.debug(f"–ü—Ä–∞–≤–∏–ª–æ {violation_type} –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
            if config.delete_violationg_user_messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if config.violationg_user_messages_lifetime_seconds > 0:
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    asyncio.create_task(schedule_delete(
                        bot, message.chat.id, message.message_id,
                        config.violationg_user_messages_lifetime_seconds
                    ))
                    if config.logging.violations:
                        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id} —á–µ—Ä–µ–∑ {config.violationg_user_messages_lifetime_seconds} —Å–µ–∫—É–Ω–¥")
                else:
                    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    await message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    if not config.features.get("violation_counter", True):
        if config.logging.violations:
            logger.debug("–°—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –±–∞–∑—É
    violation = await add_violation(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        violation_type=violation_type,
        message_text=message.text or "",
        context=context
    )

    if config.logging.violations:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ {violation.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
    if not config.features.get("penalties", False):
        if config.logging.violations:
            logger.debug("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
    violations_count = await get_user_violations_count(message.from_user.id, message.chat.id)
    active_violations = await get_user_active_violations(message.from_user.id, message.chat.id)

    if config.logging.violations:
        logger.debug(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {violations_count}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    penalty = None
    for threshold, penalty_type in sorted(config.penalties.items(), key=lambda x: int(x[0])):
        if violations_count >= int(threshold):
            penalty = penalty_type

    if config.logging.penalties and penalty:
        logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–∫–∞–∑–∞–Ω–∏–µ {penalty} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
    if penalty:
        await apply_penalty(bot, message, penalty, config, violation)

async def apply_penalty(
    bot: Bot,
    message: Message,
    penalty: str,
    config: Config,
    violation: Violation
) -> None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if config.logging.penalties:
        logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è {penalty} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞—Ä—É—à–µ–Ω–∏–µ
        if config.delete_violationg_user_messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if config.violationg_user_messages_lifetime_seconds > 0:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                asyncio.create_task(schedule_delete(
                    bot, message.chat.id, message.message_id,
                    config.violationg_user_messages_lifetime_seconds
                ))
                if config.logging.penalties:
                    logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞—Ä—É—à–µ–Ω–∏—è {message.message_id} —á–µ—Ä–µ–∑ {config.violationg_user_messages_lifetime_seconds} —Å–µ–∫—É–Ω–¥")
            else:
                # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await message.delete()
                if config.logging.penalties:
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞—Ä—É—à–µ–Ω–∏–µ {message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞—Ä—É—à–µ–Ω–∏—è: {str(e)}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violation_description = VIOLATION_DESCRIPTIONS.get(violation.violation_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ")

    try:
        if penalty == "warning":
            if config.notifications["warning"]:
                txt = f"‚ö†Ô∏è {message.from_user.full_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ {violation_description}.\n"
                txt += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {violation.message_text}"
                sent_msg = await message.answer(txt)
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

        elif penalty == "read-only":
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
            mute_minutes = config.mute_duration_seconds // 60
            mute_until = datetime.now() + datetime.timedelta(seconds=config.mute_duration_seconds)
            msk_time = (mute_until + datetime.timedelta(hours=3)).strftime("%H:%M")

            if config.notifications["mute"]:
                txt = f"ü§ê {message.from_user.full_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç –Ω–∞ {mute_minutes} –º–∏–Ω—É—Ç –∑–∞ {violation_description}.\n"
                txt += f"–ú—É—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ {msk_time} –ø–æ –ú–°–ö.\n"
                txt += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {violation.message_text}"
                sent_msg = await message.answer(txt)
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

            try:
                await bot.restrict_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    until_date=mute_until,
                    permissions={"can_send_messages": False}
                )
                if config.logging.penalties:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –º—É—Ç –¥–æ {mute_until}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º—É—Ç–∞: {str(e)}")

        elif penalty == "kick":
            if config.notifications["kick"]:
                txt = f"üëû {message.from_user.full_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –∑–∞ {violation_description}.\n"
                txt += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {violation.message_text}"
                sent_msg = await message.answer(txt)
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

            try:
                await bot.ban_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    until_date=datetime.now() + datetime.timedelta(seconds=1)
                )
                if config.logging.penalties:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

        elif penalty == "kick+ban":
            ban_until = datetime.now() + datetime.timedelta(seconds=config.temp_ban_duration_seconds)
            if config.notifications["temp_ban"]:
                txt = f"üö´ {message.from_user.full_name} –ø–æ–ª—É—á–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –∑–∞ {violation_description}.\n"
                txt += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {violation.message_text}"
                sent_msg = await message.answer(txt)
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

            try:
                await bot.ban_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    until_date=ban_until
                )
                if config.logging.penalties:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –¥–æ {ban_until}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞: {str(e)}")

        elif penalty == "ban":
            if config.notifications["ban"]:
                txt = f"‚õîÔ∏è {message.from_user.full_name} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –∑–∞ {violation_description}.\n"
                txt += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {violation.message_text}"
                sent_msg = await message.answer(txt)
                await safe_delete_bot_message(bot, sent_msg, config, is_penalty_message=True)

            try:
                await bot.ban_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id
                )
                if config.logging.penalties:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–Ω–∞: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è {penalty}: {str(e)}")