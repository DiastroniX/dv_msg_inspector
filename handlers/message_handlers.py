import time
import asyncio
import datetime
import pytz
import logging
from typing import Dict, Tuple
from collections import defaultdict

from aiogram import Router, F, Bot
from aiogram.types import Message, ChatPermissions
from data.texts import TEXTS
from config import Config
from database import (
    record_violation,
    record_deleted_message,
    get_incidents_count
)
from admin_notifications import send_admin_notification
from data.admin_texts import VIOLATION_DESCRIPTIONS, ADMIN_VIOLATION_WARNING

message_router = Router(name="message_router")

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ø–ª–∞–µ: user_id -> (last_reply_msg_id, timestamp)
# –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ -1, –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ —Ä–µ–ø–ª–∞—è.
last_reply_info: Dict[int, Tuple[int, float]] = {}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ (30 –º–∏–Ω—É—Ç)
CACHE_TTL = 1800

async def cleanup_old_cache_entries():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ last_reply_info
    """
    while True:
        try:
            current_time = time.time()
            to_remove = []
            
            for user_id, (msg_id, timestamp) in last_reply_info.items():
                if current_time - timestamp > CACHE_TTL:
                    to_remove.append(user_id)
            
            for user_id in to_remove:
                del last_reply_info[user_id]
                
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logging.error(f"Error in cache cleanup: {str(e)}", exc_info=True)
            await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–¥–æ–∂–¥–µ–º –º–∏–Ω—É—Ç—É

async def init_message_handler():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(cleanup_old_cache_entries())

def is_admin(user_id: int, config: Config) -> bool:
    return user_id in config.admin_ids

async def schedule_delete(bot: Bot, chat_id: int, message_id: int, delay_secs: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ delay_secs —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    await asyncio.sleep(delay_secs)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

async def safe_delete_bot_message(bot: Bot, message: Message, config: Config):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    if config.delete_bot_messages and config.bot_message_lifetime_seconds > 0:
        await schedule_delete(bot, message.chat.id, message.message_id, config.bot_message_lifetime_seconds)

async def _delete_message_safe(message: Message):
    try:
        await message.delete()
    except Exception:
        pass

@message_router.message(F.chat.type.in_({"group", "supergroup"}))
async def process_group_message(message: Message, bot: Bot, config: Config):
    chat_id = message.chat.id
    user = message.from_user
    if not user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if chat_id not in config.allowed_groups:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if user.is_bot or message.sender_chat:
        return

    user_id = user.id
    user_name = f"@{user.username}" if user.username else user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin_user = is_admin(user_id, config)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∏–º–µ–Ω–∏
    if is_admin_user:
        user_name = f"üëÆ‚Äç‚ôÇÔ∏è {user_name} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

    text = message.text or message.caption or ""
    text_len = len(text)
    now_ts = time.time()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if text_len >= config.message_length_limit:
        if message.reply_to_message:
            if not (message.reply_to_message.from_user and
                    message.reply_to_message.from_user.is_bot and
                    config.ignore_bot_thread_replies):
                last_reply_info[user_id] = (message.reply_to_message.message_id, now_ts)
        else:
            last_reply_info[user_id] = (-1, now_ts)
        return  # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º

    violation_type = None
    delete_msg = False

    if message.reply_to_message:
        if (message.reply_to_message.from_user and
                message.reply_to_message.from_user.is_bot and
                config.ignore_bot_thread_replies):
            pass
        else:
            replied_msg_id = message.reply_to_message.message_id
            # –ï—Å–ª–∏ self-reply: —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–≤–æ—ë –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.reply_to_message.from_user and message.reply_to_message.from_user.id == user_id:
                if (now_ts - message.reply_to_message.date.timestamp()) < config.reply_cooldown_seconds:
                    violation_type = "self_reply"
                    delete_msg = not is_admin_user  # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            else:
                # –†–µ–ø–ª–∞–π –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if user_id in last_reply_info:
                    prev_msg_id, prev_ts = last_reply_info[user_id]
                    if prev_msg_id == replied_msg_id and (now_ts - prev_ts) < config.reply_cooldown_seconds:
                        violation_type = "double_reply"
                        delete_msg = not is_admin_user  # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    else:
                        last_reply_info[user_id] = (replied_msg_id, now_ts)
                else:
                    last_reply_info[user_id] = (replied_msg_id, now_ts)
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–ø–ª–∞—è
        if user_id in last_reply_info:
            prev_msg_id, prev_ts = last_reply_info[user_id]
            if prev_msg_id == -1 and (now_ts - prev_ts) < config.reply_cooldown_seconds:
                violation_type = "no_reply"
                delete_msg = not is_admin_user  # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            else:
                last_reply_info[user_id] = (-1, now_ts)
        else:
            last_reply_info[user_id] = (-1, now_ts)

    if violation_type:
        try:
            if is_admin_user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
                violation_desc = VIOLATION_DESCRIPTIONS.get(violation_type, violation_type)
                warning_text = ADMIN_VIOLATION_WARNING.format(
                    user_name=user_name,
                    violation_desc=violation_desc,
                    msg_text=text
                )
                await bot.send_message(config.admin_chat_id, warning_text, parse_mode="HTML")
            else:
                if delete_msg:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await _delete_message_safe(message)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                deleted_msg_id = await record_deleted_message(user_id, user_name, chat_id, text)
                await record_violation(user_id, user_name, chat_id, violation_type, config)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
                notification_text = None
                if violation_type == "no_reply":
                    notification_text = TEXTS["no_reply"].format(name=user_name)
                elif violation_type == "double_reply":
                    notification_text = TEXTS["double_reply"].format(name=user_name)
                elif violation_type == "self_reply":
                    minutes = max(1, (config.reply_cooldown_seconds + 59) // 60)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    notification_text = TEXTS["self_reply"].format(name=user_name, minutes=minutes)

                if notification_text:
                    sent_msg = await bot.send_message(chat_id, notification_text, parse_mode="HTML")
                    if sent_msg:
                        await safe_delete_bot_message(bot, sent_msg, config)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∞–Ω–∫—Ü–∏–π
                await apply_penalties_if_needed(user_id, user_name, chat_id, config, violation_type, text, bot, deleted_msg_id)

        except Exception as e:
            logging.error(f"Error processing violation for user {user_name}: {str(e)}", exc_info=True)

async def apply_penalties_if_needed(
    user_id: int,
    user_name: str,
    group_id: int,
    config: Config,
    violation_type: str,
    msg_text: str,
    bot: Bot,
    deleted_msg_id: int = None
):
    count_incidents = await get_incidents_count(user_id)
    penalty_count = count_incidents  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è

    best_key = 0
    penalty_to_apply = None
    for k_str, p_type in config.penalties.items():
        k = int(k_str)
        if count_incidents >= k and k > best_key:
            best_key = k
            penalty_to_apply = p_type

    if not penalty_to_apply:
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    await send_admin_notification(
        bot,
        config,
        user_id,
        user_name,
        violation_type,
        penalty_to_apply,
        msg_text,
        penalty_count,
        deleted_msg_id=deleted_msg_id
    )

    if penalty_to_apply == "warning":
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
        next_penalty_threshold = float('inf')
        next_penalty_type = None
        current_violations = count_incidents
        
        for k_str, p_type in config.penalties.items():
            k = int(k_str)
            if k > current_violations and k < next_penalty_threshold:
                next_penalty_threshold = k
                next_penalty_type = p_type
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        penalty_descriptions = {
            "warning": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "read-only": f"–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç –Ω–∞ {max(1, config.mute_duration_seconds // 60)} –º–∏–Ω—É—Ç",
            "kick": "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã",
            "kick+ban": f"–±–∞–Ω –Ω–∞ {config.temp_ban_duration_seconds // 60} –º–∏–Ω—É—Ç",
            "ban": "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω"
        }
        
        next_penalty_description = penalty_descriptions.get(next_penalty_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        violations_until_next = next_penalty_threshold - current_violations if next_penalty_type else 0
        
        warn_text = TEXTS["official_warning"].format(
            name=user_name,
            current_violations=current_violations,
            next_penalty_description=next_penalty_description,
            violations_until_next=violations_until_next
        )
        sent_msg = await bot.send_message(group_id, warn_text, parse_mode="HTML")
        if sent_msg:
            await safe_delete_bot_message(bot, sent_msg, config)
    elif penalty_to_apply == "read-only":
        until_date = int(time.time()) + config.mute_duration_seconds
        try:
            await bot.restrict_chat_member(
                group_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
        except Exception:
            pass
        if config.notifications.get("mute_applied"):
            msk = pytz.timezone("Europe/Moscow")
            msk_time = datetime.datetime.fromtimestamp(until_date, msk).strftime("%Y-%m-%d %H:%M:%S MSK")
            minutes = max(1, (config.mute_duration_seconds + 59) // 60)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            txt = (
                f"{TEXTS['mute_applied'].format(name=user_name, minutes=minutes)}\n"
                f"{TEXTS['mute_until_time'].format(until_time=msk_time)}"
            )
            sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg:
                await safe_delete_bot_message(bot, sent_msg, config)
    elif penalty_to_apply == "kick":
        try:
            await bot.ban_chat_member(group_id, user_id, until_date=int(time.time()) + 60)
            await bot.unban_chat_member(group_id, user_id)
        except Exception:
            pass
        if config.notifications.get("kick_applied"):
            txt = TEXTS["kick_applied"].format(name=user_name)
            sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg:
                await safe_delete_bot_message(bot, sent_msg, config)
    elif penalty_to_apply == "kick+ban":
        ban_until = int(time.time()) + config.temp_ban_duration_seconds
        try:
            await bot.ban_chat_member(group_id, user_id, until_date=ban_until)
        except Exception:
            pass
        msk = pytz.timezone("Europe/Moscow")
        date_str = datetime.datetime.fromtimestamp(ban_until, msk).strftime("%Y-%m-%d %H:%M:%S MSK")
        minutes = max(1, (config.temp_ban_duration_seconds + 59) // 60)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        txt = TEXTS["kick_ban_applied"].format(name=user_name, date_str=date_str, minutes=minutes)
        sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
        if sent_msg:
            await safe_delete_bot_message(bot, sent_msg, config)
    elif penalty_to_apply == "ban":
        try:
            await bot.ban_chat_member(group_id, user_id)
        except Exception:
            pass
        if config.notifications.get("ban_applied"):
            txt = TEXTS["ban_applied"].format(name=user_name)
            sent_msg = await bot.send_message(group_id, txt, parse_mode="HTML")
            if sent_msg:
                await safe_delete_bot_message(bot, sent_msg, config)